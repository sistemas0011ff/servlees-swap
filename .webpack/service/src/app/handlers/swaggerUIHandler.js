/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/app/handlers/swaggerUIHandler.ts":
/*!**********************************************!*\
  !*** ./src/app/handlers/swaggerUIHandler.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.handler = void 0;\nconst handler = (event) => __awaiter(void 0, void 0, void 0, function* () {\n    let baseUrl;\n    // Comprueba si la cabecera \"Host\" existe y maneja la posibilidad de mayúsculas/minúsculas\n    const hostHeader = event.headers.Host || event.headers.host;\n    if (hostHeader) {\n        const isLocal = hostHeader.includes('localhost');\n        baseUrl = isLocal ? `http://${hostHeader}/${event.requestContext.stage}` : `https://${hostHeader}/${event.requestContext.stage}`;\n    }\n    else {\n        // Manejar el caso en que la cabecera \"Host\" no esté disponible\n        baseUrl = 'http://default-host';\n    }\n    const swaggerSpec = {\n        openapi: '3.0.0',\n        info: {\n            title: 'SWars API',\n            version: '1.0.0',\n            description: 'API para manejar información de planetas en SWars.',\n        },\n        servers: [\n            {\n                url: baseUrl,\n            },\n        ],\n        paths: {\n            '/api/planets': {\n                get: {\n                    summary: 'Obtiene la información de un planeta específico desde SWAPI',\n                    operationId: 'getPlanetById',\n                    tags: [\n                        'planets'\n                    ],\n                    parameters: [\n                        {\n                            name: 'id',\n                            in: 'query',\n                            required: true,\n                            description: 'ID del planeta a obtener',\n                            schema: {\n                                type: 'integer',\n                                format: 'int64'\n                            }\n                        }\n                    ],\n                    responses: {\n                        '200': {\n                            description: 'Información detallada del planeta',\n                            content: {\n                                'application/json': {\n                                    schema: {\n                                        $ref: '#/components/schemas/PlanetDataSpanishApp'\n                                    }\n                                }\n                            }\n                        },\n                        '400': {\n                            description: 'ID del planeta no proporcionado o inválido'\n                        },\n                        '500': {\n                            description: 'Error interno del servidor'\n                        }\n                    }\n                }\n            },\n            '/api/people': {\n                get: {\n                    summary: 'Obtiene la información de una persona específica por su ID',\n                    operationId: 'getPeopleById',\n                    tags: [\n                        'people'\n                    ],\n                    parameters: [\n                        {\n                            name: 'id',\n                            in: 'query',\n                            required: true,\n                            description: 'ID de la persona a obtener',\n                            schema: {\n                                type: 'integer',\n                                format: 'int64'\n                            }\n                        }\n                    ],\n                    responses: {\n                        '200': {\n                            description: 'Información detallada de la persona',\n                            content: {\n                                'application/json': {\n                                    schema: {\n                                        $ref: '#/components/schemas/PeopleDataSpanishApp'\n                                    }\n                                }\n                            }\n                        },\n                        '400': {\n                            description: 'ID de la persona no proporcionado o inválido'\n                        },\n                        '500': {\n                            description: 'Error interno del servidor'\n                        }\n                    }\n                }\n            },\n            '/planets': {\n                get: {\n                    summary: 'Lista todos los planetas',\n                    responses: {\n                        '200': {\n                            description: 'Lista de planetas obtenida con éxito',\n                            content: {\n                                'application/json': {\n                                    schema: {\n                                        type: 'array',\n                                        items: {\n                                            $ref: '#/components/schemas/Planet',\n                                        },\n                                    },\n                                },\n                            },\n                        },\n                    },\n                },\n                post: {\n                    summary: 'Crea un nuevo planeta',\n                    requestBody: {\n                        required: true,\n                        content: {\n                            'application/json': {\n                                schema: {\n                                    $ref: '#/components/schemas/PlanetDataSpanishApp'\n                                }\n                            }\n                        }\n                    },\n                    responses: {\n                        '200': {\n                            description: 'Planeta creado con éxito',\n                            content: {\n                                'application/json': {\n                                    schema: {\n                                        $ref: '#/components/schemas/Planet'\n                                    }\n                                }\n                            }\n                        },\n                        '400': {\n                            description: 'Datos de entrada no válidos'\n                        },\n                        '500': {\n                            description: 'Error interno del servidor'\n                        }\n                    }\n                }\n            },\n            '/people': {\n                get: {\n                    summary: 'Lista todas las personas',\n                    responses: {\n                        '200': {\n                            description: 'Lista de personas obtenida con éxito',\n                            content: {\n                                'application/json': {\n                                    schema: {\n                                        type: 'array',\n                                        items: {\n                                            $ref: '#/components/schemas/People'\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                post: {\n                    summary: 'Crea una nueva persona',\n                    requestBody: {\n                        required: true,\n                        content: {\n                            'application/json': {\n                                schema: {\n                                    type: 'object',\n                                    properties: {\n                                        id: { type: 'number' },\n                                        nombre: { type: 'string', nullable: true },\n                                        altura: { type: 'string', nullable: true },\n                                        masa: { type: 'string', nullable: true },\n                                        colorCabello: { type: 'string', nullable: true },\n                                        colorPiel: { type: 'string', nullable: true },\n                                        colorOjos: { type: 'string', nullable: true },\n                                        anioNacimiento: { type: 'string', nullable: true },\n                                        genero: { type: 'string', nullable: true },\n                                        nombreMundoNatal: { type: 'string', nullable: true },\n                                        creado: { type: 'string', format: 'date-time', nullable: true },\n                                        editado: { type: 'string', format: 'date-time', nullable: true },\n                                    },\n                                    required: ['nombre', 'altura', 'masa', 'colorCabello', 'colorPiel', 'colorOjos', 'anioNacimiento', 'genero', 'nombreMundoNatal']\n                                }\n                            }\n                        }\n                    },\n                    responses: {\n                        '200': {\n                            description: 'Persona creada con éxito',\n                            content: {\n                                'application/json': {\n                                    schema: {\n                                        $ref: '#/components/schemas/People'\n                                    }\n                                }\n                            }\n                        },\n                        '400': {\n                            description: 'Datos de entrada no válidos'\n                        },\n                        '500': {\n                            description: 'Error interno del servidor'\n                        }\n                    }\n                }\n            },\n        },\n        components: {\n            schemas: {\n                Planet: {\n                    type: 'object',\n                    properties: {\n                        nombre: {\n                            type: 'string',\n                            nullable: true,\n                        },\n                        periodoRotacion: {\n                            type: 'number',\n                            nullable: true,\n                        },\n                        periodoOrbital: {\n                            type: 'number',\n                            nullable: true,\n                        },\n                        diametro: {\n                            type: 'number',\n                            nullable: true,\n                        },\n                        clima: {\n                            type: 'string',\n                            nullable: true,\n                        },\n                        gravedad: {\n                            type: 'string',\n                            nullable: true,\n                        },\n                        terreno: {\n                            type: 'string',\n                            nullable: true,\n                        },\n                        aguaSuperficial: {\n                            type: 'number',\n                            nullable: true,\n                        },\n                        poblacion: {\n                            type: 'number',\n                            nullable: true,\n                        },\n                    },\n                },\n                PlanetDataSpanishApp: {\n                    type: 'object',\n                    properties: {\n                        nombre: { type: 'string' },\n                        periodoRotacion: { type: 'number' },\n                        periodoOrbital: { type: 'number' },\n                        diametro: { type: 'number' },\n                        clima: { type: 'string' },\n                        gravedad: { type: 'string' },\n                        terreno: { type: 'string' },\n                        aguaSuperficial: { type: 'number' },\n                        poblacion: { type: 'number' },\n                    },\n                    required: ['nombre', 'clima', 'terreno'] // Ajusta según los campos obligatorios\n                },\n                People: {\n                    type: 'object',\n                    properties: {\n                        id: { type: 'number' },\n                        nombre: { type: 'string', nullable: true },\n                        altura: { type: 'string', nullable: true },\n                        masa: { type: 'string', nullable: true },\n                        colorCabello: { type: 'string', nullable: true },\n                        colorPiel: { type: 'string', nullable: true },\n                        colorOjos: { type: 'string', nullable: true },\n                        anioNacimiento: { type: 'string', nullable: true },\n                        genero: { type: 'string', nullable: true },\n                        nombreMundoNatal: { type: 'string', nullable: true },\n                        creado: { type: 'string', format: 'date-time', nullable: true },\n                        editado: { type: 'string', format: 'date-time', nullable: true },\n                    },\n                    required: ['id', 'nombre', 'altura', 'masa', 'colorCabello', 'colorPiel', 'colorOjos', 'anioNacimiento', 'genero', 'nombreMundoNatal']\n                },\n                PeopleDataSpanishApp: {\n                    type: 'object',\n                    properties: {\n                        id: { type: 'number' },\n                        nombre: { type: 'string', nullable: true },\n                        altura: { type: 'string', nullable: true },\n                        masa: { type: 'string', nullable: true },\n                        colorCabello: { type: 'string', nullable: true },\n                        colorPiel: { type: 'string', nullable: true },\n                        colorOjos: { type: 'string', nullable: true },\n                        anioNacimiento: { type: 'string', nullable: true },\n                        genero: { type: 'string', nullable: true },\n                        nombreMundoNatal: { type: 'string', nullable: true },\n                        creado: { type: 'string', format: 'date-time', nullable: true },\n                        editado: { type: 'string', format: 'date-time', nullable: true },\n                    },\n                    required: ['id', 'nombre', 'altura', 'masa', 'colorCabello', 'colorPiel', 'colorOjos', 'anioNacimiento', 'genero', 'nombreMundoNatal']\n                }\n            },\n        },\n    };\n    const swaggerSpecJsonString = JSON.stringify(swaggerSpec);\n    const swaggerUiHtml = `\r\n    <!DOCTYPE html>\r\n    <html lang=\"en\">\r\n    <head>\r\n        <meta charset=\"UTF-8\">\r\n        <title>Swagger UI</title>\r\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/5.3.2/swagger-ui.css\">\r\n        <style>body { margin: 0; padding: 0; }</style>\r\n    </head>\r\n    <body>\r\n        <div id=\"swagger-ui\"></div>\r\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/5.3.2/swagger-ui-bundle.js\"></script>\r\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/5.3.2/swagger-ui-standalone-preset.js\"></script>\r\n        <script>\r\n            window.onload = () => {\r\n                window.ui = SwaggerUIBundle({\r\n                    spec: ${swaggerSpecJsonString},\r\n                    dom_id: '#swagger-ui',\r\n                    deepLinking: true,\r\n                    presets: [\r\n                        SwaggerUIBundle.presets.apis,\r\n                        SwaggerUIStandalonePreset\r\n                    ],\r\n                    layout: \"StandaloneLayout\"\r\n                });\r\n            };\r\n        </script>\r\n    </body>\r\n    </html>\r\n    `;\n    return {\n        statusCode: 200,\n        headers: {\n            'Content-Type': 'text/html',\n        },\n        body: swaggerUiHtml,\n    };\n});\nexports.handler = handler;\n\n\n//# sourceURL=webpack://swars/./src/app/handlers/swaggerUIHandler.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/app/handlers/swaggerUIHandler.ts"](0, __webpack_exports__);
/******/ 	var __webpack_export_target__ = exports;
/******/ 	for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
/******/ 	if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
/******/ 	
/******/ })()
;